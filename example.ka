# Created by expander.py

#Ciudades: name n1 n2 n3 ...
# defined location a with data array = 100.0 10.0 5.0
# defined location b with data array = 300.0 30.0 7.0
# defined location c with data array = 900.0 90.0 9.0

#Listas de ciudades, utiles para expandir reglas en subconjuntos de ciudades
# defined location list a-b containing: a,b
# defined location list ac containing: a,c

#Matrices de adyacencia entre ciudades
# defined location matrix DM:
#	DM	a	b	c
#	a	0.0	1.0	10.0
#	c	8.0	3.0	0.0
#	b	4.0	0.0	5.0

# defined location matrix TM:
#	TM	a	b	c
#	a	0.0	2.0	3.0
#	b	2.0	0.0	5.0
#	c	3.0	4.0	0.0

# expanding in a-b %agent: S(s~1~2,x)
%agent: S(s~1~2,x,loc~a~b)

# expanding in all %agent: Z(x)
%agent: Z(x,loc~a~b~c)

# expanding in DM %agent: T(x)
%agent: T(x,org~a~c~b,dst~a~b~c)

# expanding in all %agent: V(p,n,t~p~u)
%agent: V(p,n,t~p~u,loc~a~b~c)

%agent: Q(x,y,z)
%agent: R(r,s,t)

# expanding in all 'fight(%loc)' S(s~1,x),Z(x) -> S(x!1),Z(x!1) @ [log] 'var%loc' * %loc[1]
'fight(a)' S(s~1,x,loc~a),Z(x,loc~a) -> S(x!1,loc~a),Z(x!1,loc~a) @ [log] 'vara' * 10.0
'fight(b)' S(s~1,x,loc~b),Z(x,loc~b) -> S(x!1,loc~b),Z(x!1,loc~b) @ [log] 'varb' * 30.0
'fight(c)' S(s~1,x,loc~c),Z(x,loc~c) -> S(x!1,loc~c),Z(x!1,loc~c) @ [log] 'varc' * 90.0

# expanding in a-b 'healing(%loc)' S(s~2,x!%loc[1]),Z(x!%loc[1]),Z() -> S(x),S(s~1,x),Z() @ 15.1
'healing(a)' S(s~2,x!10,loc~a),Z(x!10,loc~a),Z(loc~a) -> S(x,loc~a),S(s~1,x,loc~a),Z(loc~a) @ 15.1
'healing(b)' S(s~2,x!30,loc~b),Z(x!30,loc~b),Z(loc~b) -> S(x,loc~b),S(s~1,x,loc~b),Z(loc~b) @ 15.1

# expanding in all 'infecting(%loc)' S(),S(),S(),S(x!1,y!12),V(p!1,n!2,t~p!60),V(p!2,n!3,t~u!61),...,V(p!%loc[2],n!12),Z(),Z() -> Z() @ [inf]
'infecting(a)' S(loc~a),S(loc~a),S(loc~a),S(x!1,y!12,loc~a),V(p!1,n!2,t~p!60,loc~a),V(p!2,n!3,t~u!61,loc~a),V(p!3,n!4,t~u!62,loc~a),V(p!4,n!5,t~u!63,loc~a),V(p!5,n!12,loc~a),Z(loc~a),Z(loc~a) -> Z(loc~a) @ [inf]
'infecting(b)' S(loc~b),S(loc~b),S(loc~b),S(x!1,y!12,loc~b),V(p!1,n!2,t~p!60,loc~b),V(p!2,n!3,t~u!61,loc~b),V(p!3,n!4,t~u!62,loc~b),V(p!4,n!5,t~u!63,loc~b),V(p!5,n!6,t~u!64,loc~b),V(p!6,n!7,t~u!65,loc~b),V(p!7,n!12,loc~b),Z(loc~b),Z(loc~b) -> Z(loc~b) @ [inf]
'infecting(c)' S(loc~c),S(loc~c),S(loc~c),S(x!1,y!12,loc~c),V(p!1,n!2,t~p!60,loc~c),V(p!2,n!3,t~u!61,loc~c),V(p!3,n!4,t~u!62,loc~c),V(p!4,n!5,t~u!63,loc~c),V(p!5,n!6,t~u!64,loc~c),V(p!6,n!7,t~u!65,loc~c),V(p!7,n!8,t~u!66,loc~c),V(p!8,n!9,t~u!67,loc~c),V(p!9,n!12,loc~c),Z(loc~c),Z(loc~c) -> Z(loc~c) @ [inf]
# expanding in all 'infecting(%loc)' S(),S(),S(),S(x!1,y!12),V(p!1,n!2,t!60),V(p!2,n!3),...,V(p!11,n!12),Z(),Z() -> Z() @ [inf]
'infecting(a)' S(loc~a),S(loc~a),S(loc~a),S(x!1,y!12,loc~a),V(p!1,n!2,t!60,loc~a),V(p!2,n!3,loc~a),V(p!3,n!4,loc~a),V(p!4,n!5,loc~a),V(p!5,n!6,loc~a),V(p!6,n!7,loc~a),V(p!7,n!8,loc~a),V(p!8,n!9,loc~a),V(p!9,n!10,loc~a),V(p!10,n!11,loc~a),V(p!11,n!12,loc~a),Z(loc~a),Z(loc~a) -> Z(loc~a) @ [inf]
'infecting(b)' S(loc~b),S(loc~b),S(loc~b),S(x!1,y!12,loc~b),V(p!1,n!2,t!60,loc~b),V(p!2,n!3,loc~b),V(p!3,n!4,loc~b),V(p!4,n!5,loc~b),V(p!5,n!6,loc~b),V(p!6,n!7,loc~b),V(p!7,n!8,loc~b),V(p!8,n!9,loc~b),V(p!9,n!10,loc~b),V(p!10,n!11,loc~b),V(p!11,n!12,loc~b),Z(loc~b),Z(loc~b) -> Z(loc~b) @ [inf]
'infecting(c)' S(loc~c),S(loc~c),S(loc~c),S(x!1,y!12,loc~c),V(p!1,n!2,t!60,loc~c),V(p!2,n!3,loc~c),V(p!3,n!4,loc~c),V(p!4,n!5,loc~c),V(p!5,n!6,loc~c),V(p!6,n!7,loc~c),V(p!7,n!8,loc~c),V(p!8,n!9,loc~c),V(p!9,n!10,loc~c),V(p!10,n!11,loc~c),V(p!11,n!12,loc~c),Z(loc~c),Z(loc~c) -> Z(loc~c) @ [inf]
# expanding in all 'infecting(%loc)' S(),S(),S(),S(x!1,y!12),V(p!1,n!2),V(p!2,n!3,t!61),...,V(p!11,n!12),Z(),Z() -> Z() @ [inf]
'infecting(a)' S(loc~a),S(loc~a),S(loc~a),S(x!1,y!12,loc~a),V(p!1,n!2,loc~a),V(p!2,n!3,t!61,loc~a),V(p!3,n!4,t,loc~a),V(p!4,n!5,t,loc~a),V(p!5,n!6,t,loc~a),V(p!6,n!7,t,loc~a),V(p!7,n!8,t,loc~a),V(p!8,n!9,t,loc~a),V(p!9,n!10,t,loc~a),V(p!10,n!11,t,loc~a),V(p!11,n!12,loc~a),Z(loc~a),Z(loc~a) -> Z(loc~a) @ [inf]
'infecting(b)' S(loc~b),S(loc~b),S(loc~b),S(x!1,y!12,loc~b),V(p!1,n!2,loc~b),V(p!2,n!3,t!61,loc~b),V(p!3,n!4,t,loc~b),V(p!4,n!5,t,loc~b),V(p!5,n!6,t,loc~b),V(p!6,n!7,t,loc~b),V(p!7,n!8,t,loc~b),V(p!8,n!9,t,loc~b),V(p!9,n!10,t,loc~b),V(p!10,n!11,t,loc~b),V(p!11,n!12,loc~b),Z(loc~b),Z(loc~b) -> Z(loc~b) @ [inf]
'infecting(c)' S(loc~c),S(loc~c),S(loc~c),S(x!1,y!12,loc~c),V(p!1,n!2,loc~c),V(p!2,n!3,t!61,loc~c),V(p!3,n!4,t,loc~c),V(p!4,n!5,t,loc~c),V(p!5,n!6,t,loc~c),V(p!6,n!7,t,loc~c),V(p!7,n!8,t,loc~c),V(p!8,n!9,t,loc~c),V(p!9,n!10,t,loc~c),V(p!10,n!11,t,loc~c),V(p!11,n!12,loc~c),Z(loc~c),Z(loc~c) -> Z(loc~c) @ [inf]
# expanding in all 'infecting(%loc)' S(),S(),S(),S(x!1,y!12),V(p!1,n!2,t~u!60),V(p!2,n!3,t~u!_),...,V(p!11,n!12),Z(),Z() -> Z() @ [inf]
'infecting(a)' S(loc~a),S(loc~a),S(loc~a),S(x!1,y!12,loc~a),V(p!1,n!2,t~u!60,loc~a),V(p!2,n!3,t~u!_,loc~a),V(p!3,n!4,t~u!_,loc~a),V(p!4,n!5,t~u!_,loc~a),V(p!5,n!6,t~u!_,loc~a),V(p!6,n!7,t~u!_,loc~a),V(p!7,n!8,t~u!_,loc~a),V(p!8,n!9,t~u!_,loc~a),V(p!9,n!10,t~u!_,loc~a),V(p!10,n!11,t~u!_,loc~a),V(p!11,n!12,loc~a),Z(loc~a),Z(loc~a) -> Z(loc~a) @ [inf]
'infecting(b)' S(loc~b),S(loc~b),S(loc~b),S(x!1,y!12,loc~b),V(p!1,n!2,t~u!60,loc~b),V(p!2,n!3,t~u!_,loc~b),V(p!3,n!4,t~u!_,loc~b),V(p!4,n!5,t~u!_,loc~b),V(p!5,n!6,t~u!_,loc~b),V(p!6,n!7,t~u!_,loc~b),V(p!7,n!8,t~u!_,loc~b),V(p!8,n!9,t~u!_,loc~b),V(p!9,n!10,t~u!_,loc~b),V(p!10,n!11,t~u!_,loc~b),V(p!11,n!12,loc~b),Z(loc~b),Z(loc~b) -> Z(loc~b) @ [inf]
'infecting(c)' S(loc~c),S(loc~c),S(loc~c),S(x!1,y!12,loc~c),V(p!1,n!2,t~u!60,loc~c),V(p!2,n!3,t~u!_,loc~c),V(p!3,n!4,t~u!_,loc~c),V(p!4,n!5,t~u!_,loc~c),V(p!5,n!6,t~u!_,loc~c),V(p!6,n!7,t~u!_,loc~c),V(p!7,n!8,t~u!_,loc~c),V(p!8,n!9,t~u!_,loc~c),V(p!9,n!10,t~u!_,loc~c),V(p!10,n!11,t~u!_,loc~c),V(p!11,n!12,loc~c),Z(loc~c),Z(loc~c) -> Z(loc~c) @ [inf]
# expanding in all 'infecting(%loc)' S(),S(),S(),S(x!1,y!12),V(p!1,n!2,t!60),V(p!2,n!3,t?),...,V(p!11,n!12),Z(),Z() -> Z() @ [inf]
'infecting(a)' S(loc~a),S(loc~a),S(loc~a),S(x!1,y!12,loc~a),V(p!1,n!2,t!60,loc~a),V(p!2,n!3,t?,loc~a),V(p!3,n!4,t?,loc~a),V(p!4,n!5,t?,loc~a),V(p!5,n!6,t?,loc~a),V(p!6,n!7,t?,loc~a),V(p!7,n!8,t?,loc~a),V(p!8,n!9,t?,loc~a),V(p!9,n!10,t?,loc~a),V(p!10,n!11,t?,loc~a),V(p!11,n!12,loc~a),Z(loc~a),Z(loc~a) -> Z(loc~a) @ [inf]
'infecting(b)' S(loc~b),S(loc~b),S(loc~b),S(x!1,y!12,loc~b),V(p!1,n!2,t!60,loc~b),V(p!2,n!3,t?,loc~b),V(p!3,n!4,t?,loc~b),V(p!4,n!5,t?,loc~b),V(p!5,n!6,t?,loc~b),V(p!6,n!7,t?,loc~b),V(p!7,n!8,t?,loc~b),V(p!8,n!9,t?,loc~b),V(p!9,n!10,t?,loc~b),V(p!10,n!11,t?,loc~b),V(p!11,n!12,loc~b),Z(loc~b),Z(loc~b) -> Z(loc~b) @ [inf]
'infecting(c)' S(loc~c),S(loc~c),S(loc~c),S(x!1,y!12,loc~c),V(p!1,n!2,t!60,loc~c),V(p!2,n!3,t?,loc~c),V(p!3,n!4,t?,loc~c),V(p!4,n!5,t?,loc~c),V(p!5,n!6,t?,loc~c),V(p!6,n!7,t?,loc~c),V(p!7,n!8,t?,loc~c),V(p!8,n!9,t?,loc~c),V(p!9,n!10,t?,loc~c),V(p!10,n!11,t?,loc~c),V(p!11,n!12,loc~c),Z(loc~c),Z(loc~c) -> Z(loc~c) @ [inf]
# expanding in all 'infecting(%loc)' S(),S(),S(),S(x!1,y!12),V(p!1,n!2,t!_),V(p!2,n!3,t!61),...,V(p!11,n!12),Z(),Z() -> Z() @ [inf]
'infecting(a)' S(loc~a),S(loc~a),S(loc~a),S(x!1,y!12,loc~a),V(p!1,n!2,t!_,loc~a),V(p!2,n!3,t!61,loc~a),V(p!3,n!4,t,loc~a),V(p!4,n!5,t,loc~a),V(p!5,n!6,t,loc~a),V(p!6,n!7,t,loc~a),V(p!7,n!8,t,loc~a),V(p!8,n!9,t,loc~a),V(p!9,n!10,t,loc~a),V(p!10,n!11,t,loc~a),V(p!11,n!12,loc~a),Z(loc~a),Z(loc~a) -> Z(loc~a) @ [inf]
'infecting(b)' S(loc~b),S(loc~b),S(loc~b),S(x!1,y!12,loc~b),V(p!1,n!2,t!_,loc~b),V(p!2,n!3,t!61,loc~b),V(p!3,n!4,t,loc~b),V(p!4,n!5,t,loc~b),V(p!5,n!6,t,loc~b),V(p!6,n!7,t,loc~b),V(p!7,n!8,t,loc~b),V(p!8,n!9,t,loc~b),V(p!9,n!10,t,loc~b),V(p!10,n!11,t,loc~b),V(p!11,n!12,loc~b),Z(loc~b),Z(loc~b) -> Z(loc~b) @ [inf]
'infecting(c)' S(loc~c),S(loc~c),S(loc~c),S(x!1,y!12,loc~c),V(p!1,n!2,t!_,loc~c),V(p!2,n!3,t!61,loc~c),V(p!3,n!4,t,loc~c),V(p!4,n!5,t,loc~c),V(p!5,n!6,t,loc~c),V(p!6,n!7,t,loc~c),V(p!7,n!8,t,loc~c),V(p!8,n!9,t,loc~c),V(p!9,n!10,t,loc~c),V(p!10,n!11,t,loc~c),V(p!11,n!12,loc~c),Z(loc~c),Z(loc~c) -> Z(loc~c) @ [inf]
# expanding in all 'infecting(%loc)' S(),S(),S(),S(x!1,y!12),V(p!1,n!2,t?),V(p!2,n!3,t!61),...,V(p!11,n!12),Z(),Z() -> Z() @ [inf]
'infecting(a)' S(loc~a),S(loc~a),S(loc~a),S(x!1,y!12,loc~a),V(p!1,n!2,t?,loc~a),V(p!2,n!3,t!61,loc~a),V(p!3,n!4,t,loc~a),V(p!4,n!5,t,loc~a),V(p!5,n!6,t,loc~a),V(p!6,n!7,t,loc~a),V(p!7,n!8,t,loc~a),V(p!8,n!9,t,loc~a),V(p!9,n!10,t,loc~a),V(p!10,n!11,t,loc~a),V(p!11,n!12,loc~a),Z(loc~a),Z(loc~a) -> Z(loc~a) @ [inf]
'infecting(b)' S(loc~b),S(loc~b),S(loc~b),S(x!1,y!12,loc~b),V(p!1,n!2,t?,loc~b),V(p!2,n!3,t!61,loc~b),V(p!3,n!4,t,loc~b),V(p!4,n!5,t,loc~b),V(p!5,n!6,t,loc~b),V(p!6,n!7,t,loc~b),V(p!7,n!8,t,loc~b),V(p!8,n!9,t,loc~b),V(p!9,n!10,t,loc~b),V(p!10,n!11,t,loc~b),V(p!11,n!12,loc~b),Z(loc~b),Z(loc~b) -> Z(loc~b) @ [inf]
'infecting(c)' S(loc~c),S(loc~c),S(loc~c),S(x!1,y!12,loc~c),V(p!1,n!2,t?,loc~c),V(p!2,n!3,t!61,loc~c),V(p!3,n!4,t,loc~c),V(p!4,n!5,t,loc~c),V(p!5,n!6,t,loc~c),V(p!6,n!7,t,loc~c),V(p!7,n!8,t,loc~c),V(p!8,n!9,t,loc~c),V(p!9,n!10,t,loc~c),V(p!10,n!11,t,loc~c),V(p!11,n!12,loc~c),Z(loc~c),Z(loc~c) -> Z(loc~c) @ [inf]
# expanding in all 'infecting(%loc)' S(),S(),S(),S(x!1,y!12),V(p!1,n!2,t!51),V(p!2,n!3,t!61),...,V(p!11,n!12),Z(),Z() -> Z() @ [inf]
'infecting(a)' S(loc~a),S(loc~a),S(loc~a),S(x!1,y!12,loc~a),V(p!1,n!2,t!51,loc~a),V(p!2,n!3,t!61,loc~a),V(p!3,n!4,t!71,loc~a),V(p!4,n!5,t!81,loc~a),V(p!5,n!6,t!91,loc~a),V(p!6,n!7,t!101,loc~a),V(p!7,n!8,t!111,loc~a),V(p!8,n!9,t!121,loc~a),V(p!9,n!10,t!131,loc~a),V(p!10,n!11,t!141,loc~a),V(p!11,n!12,loc~a),Z(loc~a),Z(loc~a) -> Z(loc~a) @ [inf]
'infecting(b)' S(loc~b),S(loc~b),S(loc~b),S(x!1,y!12,loc~b),V(p!1,n!2,t!51,loc~b),V(p!2,n!3,t!61,loc~b),V(p!3,n!4,t!71,loc~b),V(p!4,n!5,t!81,loc~b),V(p!5,n!6,t!91,loc~b),V(p!6,n!7,t!101,loc~b),V(p!7,n!8,t!111,loc~b),V(p!8,n!9,t!121,loc~b),V(p!9,n!10,t!131,loc~b),V(p!10,n!11,t!141,loc~b),V(p!11,n!12,loc~b),Z(loc~b),Z(loc~b) -> Z(loc~b) @ [inf]
'infecting(c)' S(loc~c),S(loc~c),S(loc~c),S(x!1,y!12,loc~c),V(p!1,n!2,t!51,loc~c),V(p!2,n!3,t!61,loc~c),V(p!3,n!4,t!71,loc~c),V(p!4,n!5,t!81,loc~c),V(p!5,n!6,t!91,loc~c),V(p!6,n!7,t!101,loc~c),V(p!7,n!8,t!111,loc~c),V(p!8,n!9,t!121,loc~c),V(p!9,n!10,t!131,loc~c),V(p!10,n!11,t!141,loc~c),V(p!11,n!12,loc~c),Z(loc~c),Z(loc~c) -> Z(loc~c) @ [inf]

# expanding in DM 'diffusion(%org-%dst)' T(x),S(x) -> T(),S(%) @ '%orgdiffusion%dst' * %cell - %org[0] + %dst[1]
'diffusion(a-b)' T(x,org~a,dst~b),S(x,loc~a) -> T(org~a,dst~b),S(loc~b) @ 'adiffusionb' * 1.0 - 100.0 + 30.0
'diffusion(a-c)' T(x,org~a,dst~c),S(x,loc~a) -> T(org~a,dst~c),S(loc~c) @ 'adiffusionc' * 10.0 - 100.0 + 90.0
'diffusion(c-a)' T(x,org~c,dst~a),S(x,loc~c) -> T(org~c,dst~a),S(loc~a) @ 'cdiffusiona' * 8.0 - 900.0 + 10.0
'diffusion(c-b)' T(x,org~c,dst~b),S(x,loc~c) -> T(org~c,dst~b),S(loc~b) @ 'cdiffusionb' * 3.0 - 900.0 + 30.0
'diffusion(b-a)' T(x,org~b,dst~a),S(x,loc~b) -> T(org~b,dst~a),S(loc~a) @ 'bdiffusiona' * 4.0 - 300.0 + 10.0
'diffusion(b-c)' T(x,org~b,dst~c),S(x,loc~b) -> T(org~b,dst~c),S(loc~c) @ 'bdiffusionc' * 5.0 - 300.0 + 90.0

 S(s~1) -> S(s~0) @ 1
'wake-up' S(s~0) -> S(s~1) @ 1

#in the case of identical density among locs: expand-init: locl density agent
# expanding in all %init: 1000 (S(s~1,x),S())
%init: 1000 (S(s~1,x,loc~a),S(loc~a))
%init: 1000 (S(s~1,x,loc~b),S(loc~b))
%init: 1000 (S(s~1,x,loc~c),S(loc~c))

# expanding in TM %init: 4 * 5 - %cell T()
%init: 18 T(org~a,dst~b)
%init: 17 T(org~a,dst~c)
%init: 18 T(org~b,dst~a)
%init: 15 T(org~b,dst~c)
%init: 17 T(org~c,dst~a)
%init: 16 T(org~c,dst~b)

#specific for a loc
%init: 1 (Z(loc~c),S())

# expanding in all %obs: 'name(%loc)' Z(x)
%obs: 'name(a)' Z(x,loc~a)
%obs: 'name(b)' Z(x,loc~b)
%obs: 'name(c)' Z(x,loc~c)

# expanding in TM %obs: 'anotherName(%org,%dst)' T(x)
%obs: 'anotherName(a,b)' T(x,org~a,dst~b)
%obs: 'anotherName(a,c)' T(x,org~a,dst~c)
%obs: 'anotherName(b,a)' T(x,org~b,dst~a)
%obs: 'anotherName(b,c)' T(x,org~b,dst~c)
%obs: 'anotherName(c,a)' T(x,org~c,dst~a)
%obs: 'anotherName(c,b)' T(x,org~c,dst~b)

# expanding in all %var: 'halfZ(%loc)' 'name(%loc)' / 2
%var: 'halfZ(a)' 'name(a)' / 2
%var: 'halfZ(b)' 'name(b)' / 2
%var: 'halfZ(c)' 'name(c)' / 2

# expanding in all %mod: ( [T] [mod] 10 = 0 ) do $ADD 1000 S(s~1,x) until [T] < 10000
%mod: ( [T] [mod] 10 = 0 ) do $ADD 1000 S(s~1,x,loc~a) until [T] < 10000
%mod: ( [T] [mod] 10 = 0 ) do $ADD 1000 S(s~1,x,loc~b) until [T] < 10000
%mod: ( [T] [mod] 10 = 0 ) do $ADD 1000 S(s~1,x,loc~c) until [T] < 10000

# expanding in TM %mod: ( [log] [E] > 100 && [T] < 10000 ) do 'diffusion(%org-%dst)' := 0
%mod: ( [log] [E] > 100 && [T] < 10000 ) do 'diffusion(a-b)' := 0
%mod: ( [log] [E] > 100 && [T] < 10000 ) do 'diffusion(a-c)' := 0
%mod: ( [log] [E] > 100 && [T] < 10000 ) do 'diffusion(b-a)' := 0
%mod: ( [log] [E] > 100 && [T] < 10000 ) do 'diffusion(b-c)' := 0
%mod: ( [log] [E] > 100 && [T] < 10000 ) do 'diffusion(c-a)' := 0
%mod: ( [log] [E] > 100 && [T] < 10000 ) do 'diffusion(c-b)' := 0
